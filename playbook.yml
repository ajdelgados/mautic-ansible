- hosts: all
  become: yes
  user: ubuntu
  vars:
    project_name: 
    project_domain: 
    php_version: '8.0'
    php_default_version_debian: ""
    php_packages_extra: 
      - php8.0-mysql
      - php8.0-curl
      - php8.0-xml
      - php8.0-zip
      - php8.0-imap
      - php8.0-bcmath
      - php8.0-mbstring
      - php8.0-gd
      - php8.0-intl
    php_enable_php_fpm: true
    php_versions_install_recommends: false
    php_memory_limit: "512M"
    php_enable_webserver: false
    php_fpm_pools:
      - pool_name: "{{project_name}}"
        pool_template: www.conf.j2
        pool_listen: "/run/php/{{project_name}}.sock"
        pool_pm_max_children: 5
        pool_pm_start_servers: 2
        pool_pm_max_requests: 3
        pool_pm_min_spare_servers: 2
        pool_pm_max_spare_servers: 5
    composer_version_branch: ''
    composer_version: '2.4.2'
    nginx_vhosts:
      - listen: "443 ssl http2"
        force_ssl: true
        server_name: "{{project_name}}.{{project_domain}}"
        root: "/home/ubuntu/{{project_name}}"
        index: "index.php"
        access_log: "/var/log/nginx/{{project_name}}.access.log"
        error_log: "/var/log/nginx/{{project_name}}.error.log"
        filename: "{{project_name}}"
        template: "{{playbook_dir}}/templates/vhost.j2"
        extra_parameters: |
          location / {
            try_files $uri $uri/ /index.php?$args;
            #try_files $uri $uri/ /index_dev.php?$args;
          }
          location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/run/php/{{project_name}}.sock;
          }
          ssl_certificate     /etc/letsencrypt/live/{{project_name}}.{{project_domain}}/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/{{project_name}}.{{project_domain}}/privkey.pem;
          ssl_protocols       TLSv1.1 TLSv1.2;
          ssl_ciphers         HIGH:!aNULL:!MD5;
    certbot_admin_email: "{{project_name}}@{{project_domain}}"
    certbot_create_if_missing: true
    certbot_certs:
    - domains:
        - "{{project_name}}.{{project_domain}}"
    mysql_databases:
      - name: "{{project_name}}"
    mysql_users:
      - name: "{{project_name}}"
        password: "{{project_name}}"
        host: localhost
        priv: "{{project_name}}.*:ALL"
    mysql_packages:
      - mariadb-server
      - mariadb-common
    mysql_config_include_files: [
      src: "{{playbook_dir}}/templates/performance.cnf"
    ]
  # OJO: Meter la opción de monitor de Nginx https://www.nginx.com/blog/monitoring-nginx/ 
  # para saber los usuario en línea
  roles:
    - ansible-role-php-versions
    - ansible-role-php
    - ansible-role-composer
    - ansible-role-nginx
    - ansible-role-certbot
    - ansible-role-mysql
  pre_tasks:
    - name: add www-data group to ubuntu user
      user: name=ubuntu groups=www-data append=yes
  tasks:
    - name: Update php.ini
      lineinfile:
        path: /etc/php/{{php_version}}/fpm/php.ini
        regexp: '^zend.assertions ='
        line: 'zend.assertions = -1'
        state: present
    - name: Check if Mautic was cloned before
      stat:
        path: /home/ubuntu/{{project_name}}
      register: mautic
    - name: Clone Mautic
      git:
        repo: https://github.com/mautic/mautic.git
        dest: /home/ubuntu/{{project_name}}
        version: "4.4.2"
      when: not mautic.stat.exists
    - name: Execute composer install
      command: composer install -n
      args:
        chdir: /home/ubuntu/{{project_name}}
      when: not mautic.stat.exists
    - name: Check if MauticRecaptchaBundle was cloned before
      stat:
        path: /home/ubuntu/{{project_name}}/plugins/MauticRecaptchaBundle
      register: mauticRecaptcha
    - name: Clone MauticRecaptchaBundle
      git:
        repo: https://github.com/konstantincodes/mautic-recaptcha.git
        dest: /home/ubuntu/{{project_name}}/plugins/MauticRecaptchaBundle
        version: "3.1.0"
      when: not mauticRecaptcha.stat.exists
    - name: Check if local configs exists
      stat:
        path: /home/ubuntu/{{project_name}}/app/config/local.php
      register: mauticLocal
    - name: Modify local configs
      replace:
        path: /home/ubuntu/{{project_name}}/app/config/local.php
        regexp: '\/index.php'
        replace: ''
        backup: yes
      when: mauticLocal.stat.exists
    - name: Create logs directory
      file:
        path: /home/ubuntu/{{project_name}}/app/logs
        state: directory
    - name: Create cache directory
      file:
        path: /home/ubuntu/{{project_name}}/app/cache
        state: directory
    - name: Change ownership
      file:
        path: /home/ubuntu/{{project_name}}
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
    - name: Change directories permission
      command: find . -type d -not -perm 755 -exec chmod 755 {} +
    - name: Change files permission
      command: find . -type f -not -perm 644 -exec chmod 644 {} +
    - name: Change some directories permission
      file:
        path: "{{ item }}"
        state: directory
        mode: "g+w"
        recurse: yes
      with_items:
        - "/home/ubuntu/{{project_name}}/app/cache"
        - "/home/ubuntu/{{project_name}}/app/logs"
        - "/home/ubuntu/{{project_name}}/app/config"
        - "/home/ubuntu/{{project_name}}/media/files"
        - "/home/ubuntu/{{project_name}}/media/images"
        - "/home/ubuntu/{{project_name}}/translations"
    - name: Add Mautic Segments Update cron
      cron:
        name: Mautic Segments Update
        minute: "1,16,31,46"
        job: php /home/ubuntu/{{project_name}}/bin/console mautic:segments:update
    - name: Add Mautic Campaigns Update cron
      cron:
        name: Mautic Campaigns Update
        minute: 3,18,33,48
        job: php /home/ubuntu/{{project_name}}/bin/console mautic:campaigns:update
    - name: Add Mautic Campaigns Trigger cron
      cron:
        name: Mautic Campaigns Trigger
        minute: "*/2"
        job: php /home/ubuntu/{{project_name}}/bin/console mautic:campaigns:trigger
    - name: Copy file Free Memory
      copy:
        src: free-memory.sh
        dest: /home/free-memory.sh
        owner: root
        group: root
        mode: '0700'
    - name: Add Free Memory cron
      cron:
        name: Free Memory
        minute: "7"
        job: /home/free-memory.sh >> /home/free-memory.log
    - name: Install python3-certbot-nginx
      apt: name=python3-certbot-nginx state=present
    - name: Add Reload Cerbot certificate
      cron:
        name: Reload Cerbot certificate
        minute: "0"
        hour: "0"
        day: "1"
        month: "*/2"
        job: certbot certonly --nginx -n -d {{project_name}}.{{project_domain}} && nginx -s reload
